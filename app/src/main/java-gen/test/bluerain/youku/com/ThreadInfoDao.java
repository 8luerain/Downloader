package test.bluerain.youku.com;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import test.bluerain.youku.com.ThreadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "THREAD_INFO".
*/
public class ThreadInfoDao extends AbstractDao<ThreadInfo, Long> {

    public static final String TABLENAME = "THREAD_INFO";

    /**
     * Properties of entity ThreadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MThreadId = new Property(1, int.class, "mThreadId", false, "M_THREAD_ID");
        public final static Property MUrl = new Property(2, String.class, "mUrl", false, "M_URL");
        public final static Property MStartPosition = new Property(3, int.class, "mStartPosition", false, "M_START_POSITION");
        public final static Property MEndPosition = new Property(4, int.class, "mEndPosition", false, "M_END_POSITION");
        public final static Property MDownloadSize = new Property(5, int.class, "mDownloadSize", false, "M_DOWNLOAD_SIZE");
        public final static Property MSpeed = new Property(6, int.class, "mSpeed", false, "M_SPEED");
        public final static Property MIsFinished = new Property(7, Boolean.class, "mIsFinished", false, "M_IS_FINISHED");
    };


    public ThreadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ThreadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"THREAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_THREAD_ID\" INTEGER NOT NULL ," + // 1: mThreadId
                "\"M_URL\" TEXT NOT NULL ," + // 2: mUrl
                "\"M_START_POSITION\" INTEGER NOT NULL ," + // 3: mStartPosition
                "\"M_END_POSITION\" INTEGER NOT NULL ," + // 4: mEndPosition
                "\"M_DOWNLOAD_SIZE\" INTEGER NOT NULL ," + // 5: mDownloadSize
                "\"M_SPEED\" INTEGER NOT NULL ," + // 6: mSpeed
                "\"M_IS_FINISHED\" INTEGER);"); // 7: mIsFinished
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"THREAD_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ThreadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMThreadId());
        stmt.bindString(3, entity.getMUrl());
        stmt.bindLong(4, entity.getMStartPosition());
        stmt.bindLong(5, entity.getMEndPosition());
        stmt.bindLong(6, entity.getMDownloadSize());
        stmt.bindLong(7, entity.getMSpeed());
 
        Boolean mIsFinished = entity.getMIsFinished();
        if (mIsFinished != null) {
            stmt.bindLong(8, mIsFinished ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ThreadInfo readEntity(Cursor cursor, int offset) {
        ThreadInfo entity = new ThreadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mThreadId
            cursor.getString(offset + 2), // mUrl
            cursor.getInt(offset + 3), // mStartPosition
            cursor.getInt(offset + 4), // mEndPosition
            cursor.getInt(offset + 5), // mDownloadSize
            cursor.getInt(offset + 6), // mSpeed
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // mIsFinished
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ThreadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMThreadId(cursor.getInt(offset + 1));
        entity.setMUrl(cursor.getString(offset + 2));
        entity.setMStartPosition(cursor.getInt(offset + 3));
        entity.setMEndPosition(cursor.getInt(offset + 4));
        entity.setMDownloadSize(cursor.getInt(offset + 5));
        entity.setMSpeed(cursor.getInt(offset + 6));
        entity.setMIsFinished(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ThreadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ThreadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
